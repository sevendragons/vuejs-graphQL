# /*-------------- Type Definition --------------*/
  # username: String! @unique    // not working
  # üê≥ üéØ ‚ô•Ô∏è

scalar Date

type User {
  _id: ID
  username: String!
  email: String!
  password: String!
  avatar: String
  joinDate: Date
  favorites: [Post]
}

type Post {
  _id: ID
  title: String!
  imageUrl: String! 
  categories: [String]!
  description: String!
  createdDate: Date
  likes: Int,
  createdBy: User!,
  messages: [Message]
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: Date
  messageUser: User!
}

type LikesPost {
  # Likes for Post / Favorites for user Post
  likes: Int
  favorites:[Post]
}

type Token {
  token: String!
}
type PostsPage{
  posts: [Post]
  hasMore: Boolean
}

type Query {
  getCurrentUser: User
  getPosts: [Post]
  getUserPosts(userId: ID!): [Post]
  getPost(postId: ID!): Post!
  infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostsPage
  searchPosts(searchTerm: String): [Post]
}

type Mutation {
  addPost(
    title: String!
    imageUrl: String!
    categories: [String]!
    description: String!
    creatorId: ID!
  ): Post!
  updateUserPost(
    postId: ID!
    userId: ID!
    title: String!
    imageUrl: String!
    categories: [String]!
    description: String!
  ): Post!
  deleteUserPost(postId: ID!): Post!
  
  deleteMessagePost(messageId: ID!): Message!
  addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
  
  likePost(postId: ID!, username: String!): LikesPost!
  unlikePost(postId: ID!, username: String!): LikesPost!
  
  signinUser( email: String!, password: String ): Token
  signupUser(username: String!, email: String!, password: String!): Token
}



